"""Add orders and workouts

Revision ID: f1168e97f2a9
Revises: 0556029e25b1
Create Date: 2023-06-20 11:29:46.874163

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "f1168e97f2a9"
down_revision = "0556029e25b1"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "orders",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "type", sa.Enum("workout", "fitness_plan", name="ordertype"), nullable=False
        ),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("fitness_coach_id", sa.Uuid(), nullable=False),
        sa.Column("amount", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "in_progress",
                "pending_approval",
                "approved",
                "declined",
                name="orderstatus",
            ),
            nullable=False,
        ),
        sa.Column("decline_reason", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["fitness_coach_id"],
            ["fitness_coaches.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "workouts",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "name_translations", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "description_translations",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.Column(
            "experience_level",
            sa.Enum("beginner", "intermediate", "experienced", name="experiencelevel"),
            nullable=False,
        ),
        sa.Column("fitness_coach_id", sa.Uuid(), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["fitness_coach_id"],
            ["fitness_coaches.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "workout_exercises",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("workout_id", sa.Uuid(), nullable=False),
        sa.Column("exercise_id", sa.Uuid(), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["exercise_id"],
            ["exercises.id"],
        ),
        sa.ForeignKeyConstraint(
            ["workout_id"],
            ["workouts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "workout_id",
            "exercise_id",
            "order",
            deferrable=True,
            initially="DEFERRED",
            name="workout_exercise_unique_order",
        ),
    )
    op.create_table(
        "workout_exercise_sets",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("workout_exercise_id", sa.Uuid(), nullable=False),
        sa.Column(
            "weight_type",
            sa.Enum("absolute", "relative", name="setweighttype"),
            nullable=True,
        ),
        sa.Column("reps", sa.Integer(), nullable=True),
        sa.Column("weight", sa.Float(), nullable=True),
        sa.Column("break_", sa.Integer(), nullable=True),
        sa.Column("duration", sa.Integer(), nullable=True),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "weight_type != 'relative' OR weight BETWEEN 0 AND 1.0",
            name="relative_weight_range",
        ),
        sa.ForeignKeyConstraint(
            ["workout_exercise_id"], ["workout_exercises.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "workout_exercise_id",
            "order",
            deferrable=True,
            initially="DEFERRED",
            name="workout_exercise_sets_unique_order",
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("workout_exercise_sets")
    op.drop_table("workout_exercises")
    op.drop_table("workouts")
    op.drop_table("orders")
    # ### end Alembic commands ###
